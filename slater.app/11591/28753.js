// This file was generated by Slater.app - global.js


gsap.registerPlugin(ScrollTrigger, CustomEase, SplitText, Draggable, InertiaPlugin);

CustomEase.create("ease-primary", "0.87, 0, 0.13, 1");
CustomEase.create("ease-secondary", "0.16, 1, 0.35, 1");
CustomEase.create("ease-tertiary", "0.53, 0.23, 0.25, 1")
CustomEase.create("ease-menu", ".7,0,.22,1");
CustomEase.create("ease-transition", "0.76, 0, 0.24, 1")
CustomEase.create("ease-textloader", "0.83, 0, 0.17, 1")

let lenis;
let transitionOffset = 375;
let transitionNormal = 0.875;
let transitionSlider = 1;
const isMobileScreen = window.matchMedia('(max-width: 767px)').matches;

initPageTransitions();

function pageTransitionIn() {

    const tl = gsap.timeline();

    tl.set(".transition_screen", {
        autoAlpha: 0,
    }, 0);

    tl.to(".transition_screen", {
        autoAlpha: 1,
        ease: "ease-secondary",
        duration: 0.35,
    }, 0);

    return tl;
}

function pageTransitionOut() {

    document.body.removeAttribute("data-lenis-prevent");
    document.body.classList.remove("overflow-hidden");

    // Common Text Transition
    const textAnimationTransition = document.querySelectorAll(
        "[data-split-animation][data-lines-split]")

    if (textAnimationTransition.length) {
        textAnimationTransition.forEach(element => {
            const tl = gsap.timeline();
            const parentSplit = element.parentSplit;
            const childSplit = element.childSplit;

            if (!parentSplit || !childSplit) return;

            // Animate all lines together with the element as trigger
            tl.from(childSplit.lines, {
                yPercent: 120,
                rotate: 0.001,
                ease: "ease-secondary",
                duration: transitionSlider,
                stagger: 0.0825,
            });
        });
    }
    if (document.querySelector("[data-image-transition-anim]")) {
        const coverContainers = document.querySelectorAll("[data-image-transition-anim]");

        coverContainers.forEach(coverContainer => {
            const cover = coverContainer.querySelector('[data-image-cover]');
            const image = coverContainer.querySelector('[data-image]');

            if (cover && image) {
                // Set initial state
                gsap.set(image, {
                    scale: 1.1
                });

                const animate = () => {
                    const tl = gsap.timeline();
                    tl.to(image, {
                        scale: 1,
                        duration: 1.2,
                        ease: "ease-secondary"
                    }, 0).to(cover, {
                        autoAlpha: 0,
                        duration: 0.6
                    }, 0); // simultaneous animations
                };

                // If image is already loaded, animate immediately
                if (image.complete) {
                    animate();
                } else {
                    // Wait for the image to load before animating
                    image.onload = animate;
                }
            }
        });
    }
    //Common Navbar Transition
    if (document.querySelector(".navbar_wrap")) {
        const tl = gsap.timeline();

        gsap.defaults({
            ease: "ease-secondary",
            duration: transitionSlider,
        });

        tl.from(".navbar_home", {
            yPercent: 120,
            rotate: 0.001,
        }, 0.1).from(".navbar_links_li", {
            yPercent: 200,
            rotate: 0.001,
            stagger: 0.0625,
        }, "-=0.9").from(".navbar_cta_contain", {
            yPercent: 120,
            rotate: 0.001,
        }, "-=1").from(".navbar_menu_text", {
            yPercent: 120,
            rotate: 0.001,
        }, "-=0.9")
    }

    //Homepage Transition animations

    if (document.querySelector(".hero_image_contain")) {

        const tl = gsap.timeline();

        gsap.set(".hero_image_contain", {
            scale: 1.1,
            filter: "blur(5px)"
        })

        tl.to(".hero_image_contain", {
            scale: 1,
            filter: "blur(0px)",
            duration: 1.8,
            ease: "ease-secondary"
        }, "<")
    }

    if (document.querySelector(".hero_collection_details")) {
        const tl = gsap.timeline();

        tl.from(".hero_collection_details > *", {
            yPercent: 200,
            rotate: 0.001,
            ease: "ease-secondary",
            duration: transitionSlider,
            stagger: 0.125,
        })

    }

    // Gallery Transition animations
    if (document.querySelector(".gallery_tooltip_wrap")) {
        const tl = gsap.timeline();

        tl.from(".gallery_tooltip_wrap", {
            yPercent: 150,
            rotate: 0.001,
            ease: "ease-secondary",
            duration: 1.2,
        }, 0.8)
    }

    if (document.querySelector(".gallery_item")) {
        const tl = gsap.timeline();

        tl.from(".gallery_item", {
            filter: "blur(5px)",
            scale: 0.9,
            rotate: 0.001,
            stagger: {
                amount: 0.155,
                from: "center"
            },
            ease: "ease-secondary",
            duration: 1.2,
        }, "<")
    }

    // Works Transition animations
    if (document.querySelector(".hero_works_wrap")) {

        // Create timeline
        const tl = gsap.timeline();

        if (isMobileScreen) {
            tl.from(".works_bottom_content, .works_bottom_scroll", {
                yPercent: 120,
                rotate: 0.001,
                stagger: 0.175,
                ease: "ease-secondary",
                duration: transitionSlider,
            }, ).from(".works_bottom_filterbtn", {
                yPercent: 120,
                rotate: 0.001,
                stagger: 0.035,
                ease: "ease-secondary",
                duration: transitionSlider,
            }, "-=0.8");
        } else {
            // First, reset all clip-paths to ensure animation works
            gsap.set("[data-clip-container]", {
                clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
                overwrite: "auto"
            });

            // Then animate them with stagger
            tl.to("[data-clip-container]", {
                clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
                ease: "ease-secondary",
                duration: 1.2
            }, 0.1).from(".works_bottom_content, .works_bottom_scroll", {
                yPercent: 120,
                rotate: 0.001,
                stagger: 0.175,
                ease: "ease-secondary",
                duration: transitionSlider,
            }, "-=0.9").from(".works_bottom_filterbtn", {
                yPercent: 120,
                rotate: 0.001,
                stagger: 0.035,
                ease: "ease-secondary",
                duration: transitionSlider,
            }, "-=0.9");

        }

    }

    // Studio page transition animations
    const studioSvg = document.querySelector(".hero_studio_svg")
    if (studioSvg) {
        const tl = gsap.timeline();
        tl.from(".hero_studio_path", {
            yPercent: 120,
            stagger: {
                amount: 0.225,
                from: "end"
            },
            ease: "ease-secondary",
            duration: 1.6,
        })
    }

    // Works Detail Page Transition Animation

    if (document.querySelector(".hero_project_wrap")) {

        const tl = gsap.timeline()

        gsap.set(".hero_project_thumbnail", {
            scale: 1.05,
        })

        tl.to(".hero_project_thumbnail", {
            scale: 1,
            duration: 1.8,
            ease: "ease-secondary"
        }, "<").from("[data-details-animation]", {
            yPercent: 200,
            rotate: 0.001,
            stagger: 0.0825,
            ease: "ease-secondary",
            duration: transitionSlider,
        }, "-=1.5")
    }

    if (document.querySelector(".terms_wrap")) {

        const tl = gsap.timeline()

        tl.from(".terms_rich_text", {
            autoAlpha: 0,
            y: 50,
            ease: "ease-secondary",
            duration: transitionSlider,
        }, 0.5)
    }

    if (document.querySelector(".precedent_item_wrap")) {
        const tl = gsap.timeline()

        tl.from(".precedent_item_wrap", {
            yPercent: 120,
            stagger: 0.0825,
            ease: "ease-secondary",
            duration: transitionSlider,
        })
    }
}

function initPageTransitions() {
    async function commonLeaveBefore(data) {
        const body = document.body;
        const isMenuOpen = body.dataset.navigationStatus === 'is-open';
        if (isMenuOpen) {
            body.dataset.navigationStatus = 'is-closed';
            animateMenuClose();
        }

        document.querySelectorAll('[data-navigation-status]')
            .forEach(el => el.setAttribute('data-navigation-status', 'is-closed'));
        pageTransitionIn(data.current);
    }

    async function commonLeaveAfter(data) {
        killAllScrollTriggers();
        data.current.container.remove();
        cleanupSplitTexts();
    }

    async function commonBeforeEnter(data) {
        ScrollTrigger.getAll().forEach(t => t.kill());
        initResetWebflow(data);
        initSmoothScroll(data.next.container);
        initScript();
    }

    async function commonEnter(data) {
        gsap.to(".transition_screen", {
            autoAlpha: 0,
            ease: "ease-secondary",
            duration: transitionNormal,
        });
        pageTransitionOut(data.next);
    }

    barba.hooks.after((data) => {
        window.scrollTo(0, 0);
        ScrollTrigger.refresh();
    });

    barba.init({
        sync: true,
        preventRunning: true,
        timeout: 7000,
        transitions: [{
            name: 'default',
            async leave(data) {
                await commonLeaveBefore(data);
                await delay(transitionOffset);
                await commonLeaveAfter(data);
            },
            async beforeEnter(data) {
                await commonBeforeEnter(data);
            },
            async enter(data) {
                await commonEnter(data);
            },
            once(data) {
                initSmoothScroll(data.next.container);
                initLoader();
                initScript();
            }
        }],
        views: [{
                namespace: "gallery",
                afterEnter() {
                    initGalleryPage();
                    var vids = document.querySelectorAll("video");
                    vids.forEach(vid => {
                        var playPromise = vid.play();
                        if (playPromise !==
                            undefined) {
                            playPromise.then(_ => {}).catch(error => {});
                        };
                    });
                }
            },
            {
                namespace: "home",
                afterEnter() {
                    initHomePage();
                }
            },
            {
                namespace: "process",
                afterEnter() {
                    initProcessPage();
                }
            },
            {
                namespace: "project-detail",
                afterEnter() {
                    initProjectDetailPage();
                }
            },
            {
                namespace: "studio",
                afterEnter() {
                    initStudioPage();
                }
            },
            {
                namespace: "works",
                afterEnter() {
                    initWorksPage();
                }
            },
            {
                namespace: "precedent-detail",
                afterEnter() {
                    initPrecedentPages();
                }
            }
        ]
    });

    function initSmoothScroll(container) {
        initLenis();
        ScrollTrigger.refresh();
    }

    function killAllScrollTriggers() {
        if (typeof ScrollTrigger !== 'undefined') {
            ScrollTrigger.killAll();
        }
    }
    history.scrollRestoration = "manual";
}

// initPageTransitions();

function initResetWebflow(data) {
    let parser = new DOMParser();
    let dom = parser.parseFromString(data.next.html, 'text/html');
    let webflowPageId = $(dom).find('html').attr('data-wf-page');

    $('html').attr('data-wf-page', webflowPageId);

    window.Webflow && window.Webflow.destroy();
    window.Webflow && window.Webflow.ready();
    const ix2 = window.Webflow ? .require("ix2");
    if (typeof ix2 !== "undefined") {
        ix2.init();
    }

    $(".w--current").removeClass("w--current");
    $("a").each(function() {
        if ($(this).attr("href") === window.location.pathname) {
            $(this).addClass("w--current");
        }
    });
}

function delay(n) {
    n = n || 2000;
    return new Promise((done) => {
        setTimeout(() => {
            done();
        }, n);
    });
}

// Store references to all split texts
let activeSplitTexts = [];

function cleanupSplitTexts() {
    // Revert all active split texts
    activeSplitTexts.forEach(splitObj => {
        if (splitObj && typeof splitObj.revert === 'function') {
            splitObj.revert();
        }
    });

    // Clear the array
    activeSplitTexts = [];

    // Remove any data-split-initialized attributes to allow re-initialization
    document.querySelectorAll('[data-split-initialized]').forEach(el => {
        el.removeAttribute('data-split-initialized');
    });
}

function initSplitText() {
    // Handle line splitting
    const lineElements = document.querySelectorAll('[data-lines-split]');

    if (lineElements.length) {
        lineElements.forEach(element => {
            // Skip if this element already has splits attached
            if (element.hasAttribute('data-split-initialized')) {
                return;
            }

            // Create parent split
            const parentSplit = new SplitText(element, {
                type: "lines",
                linesClass: "split-parent"
            });

            // Create child split using parent lines
            const childSplit = new SplitText(parentSplit.lines, {
                type: "lines",
                linesClass: "split-child"
            });

            // Store splits on the element for later use in animations
            element.parentSplit = parentSplit;
            element.childSplit = childSplit;

            // Mark this element as initialized
            element.setAttribute('data-split-initialized', 'true');

            // Store references for cleanup
            activeSplitTexts.push(parentSplit, childSplit);
        });
    }
}

/**
 * Initialize ScrollTrigger Animations
 * Applies animations to previously split text elements
 */
function initScrollTriggerAnimations() {

    // Parallax
    const translateElements = document.querySelectorAll("[data-translate-hero]");
    const scrollContainer = document.querySelector("[data-scroll-container]");

    if (translateElements.length && scrollContainer) {
        const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
        const isSmallScreen = gsap.matchMedia();

        const targetTranslate = parseFloat(scrollContainer.dataset.targetTranslate) || 800;
        const inverseTranslate = scrollContainer.dataset.inverseTranslate ?
            parseFloat(scrollContainer.dataset.inverseTranslate) // Custom inverse if provided
            :
            -targetTranslate;

        const startPosition = scrollContainer.dataset.start || "top top";
        const endPosition = scrollContainer.dataset.end || "bottom top";

        isSmallScreen.add("(min-width: 768px)", () => {
            if (!prefersReducedMotion) {
                translateElements.forEach(element => {
                    gsap.fromTo(
                        element, {
                            y: inverseTranslate
                        }, // Use inverse of targetTranslate here
                        {
                            y: targetTranslate, // Target translation value
                            ease: 'none',
                            scrollTrigger: {
                                trigger: scrollContainer,
                                start: startPosition,
                                end: endPosition,
                                scrub: 0,
                                // markers: true
                            }
                        }
                    );
                });
            }
        });
    }

    const overlayContainer = document.querySelector("[data-overlay-container]");

    if (overlayContainer) {
        const targetOpacity = overlayContainer.dataset.targetOpacity || 0.6;

        gsap.to('[data-overlay-scroll]', {
            opacity: parseFloat(targetOpacity),
            scrollTrigger: {
                trigger: overlayContainer,
                start: 'top top', // Start at the top of the hero section
                end: 'bottom bottom', // End when the bottom of the hero section reaches the top of the viewport
                scrub: true, // Smooth scrubbing effect tied to scroll position
            }
        });
    }
    // Line animations
    const lineAnimElements = document.querySelectorAll('[data-lines-split][data-animate-scroll]');

    if (lineAnimElements.length) {
        lineAnimElements.forEach(element => {

            const parentSplit = element.parentSplit;
            const childSplit = element.childSplit;

            if (!parentSplit || !childSplit) return;

            // Animate all lines together with the element as trigger
            gsap.from(childSplit.lines, {
                yPercent: 120,
                rotate: 0.001,
                ease: "ease-secondary",
                duration: transitionSlider,
                stagger: 0.0625, // Optional stagger for lines within the element
                clearProps: "all",
                scrollTrigger: {
                    trigger: element,
                    start: "top 80%",
                    toggleActions: "play none none none",
                    // markers: true, // Uncomment for debugging
                }
            });

        });
    }
}

function initScript() {
    initLenis();
    initBasicFunctions();
    initSplitText();
    initScrollTriggerAnimations();
    initMenu();
    initContactForm();
    initNavFunctions();
    initImageReveal();
}

function initBasicFunctions() {

    const allProcess = $("[data-process-item]");

    if (allProcess) {
        allProcess.each(function(index) {
            $(this).find('[data-process-value]').text(index + 1);
        });
    }

    function totalProjectCount() {
        const formatProjectCount = (count) => {
            if (count >= 10) { // Double digit or more
                return `(${count})`;
            } else { // Single digit
                return `(0${count})`;
            }
        };

        const totalProjects = document.querySelectorAll(".project_item");
        const allProjectsIndex = $("[data-projects-count]");

        if (totalProjects.length) {
            allProjectsIndex.text(formatProjectCount(totalProjects.length));
        }
    }

    // Dynamic Year
    const currentYear = new Date().getFullYear();
    const currentYearElements = document.querySelectorAll('[data-current-year]');
    currentYearElements.forEach(currentYearElement => {
        currentYearElement.textContent = currentYear;
    });

    function updateLocationTime() {
        const footerTime = document.querySelector('[data-current-time]');
        const footerState = document.querySelector('.footer_bottom_state');

        if (!footerTime || !footerState) return;

        const melbourneTime = new Date().toLocaleString("en-US", {
            timeZone: "Australia/Brisbane"
        });
        const melbourneDate = new Date(melbourneTime);
        const mTime = melbourneDate.toLocaleTimeString("en-US", {
            hour: "numeric",
            minute: "numeric",
        });
        footerTime.textContent = mTime;

        // Check if we're within business hours
        const day = melbourneDate.getDay(); // 0 = Sunday, 1 = Monday, etc.
        const hour = melbourneDate.getHours();
        const minutes = melbourneDate.getMinutes();
        const currentTime = hour * 60 + minutes; // Convert to minutes for easier comparison

        const openingTime = 8 * 60 + 30; // 8:30 AM in minutes
        const closingTime = 17 * 60; // 5:00 PM in minutes

        // Check if it's a weekday (Monday-Friday) and within business hours
        const isBusinessDay = day >= 1 && day <= 5;
        const isWithinHours = currentTime >= openingTime && currentTime < closingTime;

        // Update status text
        footerState.textContent = (isBusinessDay && isWithinHours) ? 'open' : 'closed';
    }

    // Run immediately and update every minute
    updateLocationTime();
    totalProjectCount();
    setInterval(updateLocationTime, 60000);
}

function initLenis() {
    if (Webflow.env("editor")) return;

    lenis = new Lenis({
        duration: 0.9
    });

    function raf(time) {
        lenis.raf(time);
        requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);
}

function animateMenuClose() {
    document.body.removeAttribute("data-lenis-prevent");
    document.body.classList.remove("overflow-hidden");

    const tl = gsap.timeline();

    tl.to(".menu_wrap", {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)",
        duration: 0.5,
        ease: "ease-menu"
    }).set(".menu_contain_link", {
        yPercent: 102,
    });
}

function animateMenuOpen() {
    document.body.setAttribute("data-lenis-prevent", "true");
    document.body.classList.add("overflow-hidden");

    const tl = gsap.timeline();

    tl.to(".menu_wrap", {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
        duration: transitionSlider,
        ease: "ease-menu"
    }).to(".menu_contain_link", {
        yPercent: 0,
        rotate: 0.001,
        duration: 1.15,
        stagger: 0.0425,
        ease: "ease-secondary"
    }, "-=0.45");
}

function initMenu() {
    const body = document.body;
    const menuBtns = document.querySelectorAll('[data-menu-btn]');
    const closeBtn = document.querySelector('[data-menu-close]');
    // Check if menu elements exist
    if (!menuBtns.length) {
        return;
    }
    if (!closeBtn) {
        return;
    }
    gsap.set(".menu_contain_link", {
        y: 0,
        yPercent: 100,
        rotate: 0.001,
    });
    const toggleMenu = () => {
        const isOpen = body.dataset.navigationStatus === 'is-open';
        body.dataset.navigationStatus = isOpen ? 'is-closed' : 'is-open';
        if (isOpen) {
            animateMenuClose();
        } else {
            animateMenuOpen();
        }
    };
    const closeMenu = () => {
        if (body.dataset.navigationStatus === 'is-open') {
            body.dataset.navigationStatus = 'is-closed';
            animateMenuClose();
            document.body.removeAttribute("data-lenis-prevent");
            document.body.classList.remove("overflow-hidden");
        }
    };
    // Add click event to all menu buttons
    menuBtns.forEach(btn => {
        btn.addEventListener('click', toggleMenu);
    });
    closeBtn.addEventListener('click', closeMenu);
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeMenu();
        }
    });
}

function animateContactClose() {
    document.body.removeAttribute("data-lenis-prevent");
    document.body.classList.remove("overflow-hidden");
    const container = document.querySelector(".contact_modal_wrap")
    const text = container.querySelectorAll(".split-child")
    const coverContainer = container.querySelector("[data-image-reveal-noscroll]")
    const cover = container.querySelector('[data-image-cover]');
    const image = container.querySelector('[data-image]');
    const overlay = document.querySelector(".contact_overlay_close")
    overlay.style.pointerEvents = "none";
    const tl = gsap.timeline();
    tl.to(container, {
        clipPath: "polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%)",
        duration: transitionSlider,
        ease: "ease-menu"
    }).to(overlay, {
        autoAlpha: 0,
        duration: transitionSlider,
        ease: "ease-menu"
    }, "<").set(text, {
        yPercent: 102,
    }).set(cover, {
        autoAlpha: 1
    }).set(image, {
        scale: 1.1
    })
}

function animateContactOpen() {
    document.body.setAttribute("data-lenis-prevent", "true");
    document.body.classList.add("overflow-hidden");
    const container = document.querySelector(".contact_modal_wrap")
    const text = container.querySelectorAll(".split-child")
    const coverContainer = container.querySelector("[data-image-reveal-noscroll]")
    const cover = container.querySelector('[data-image-cover]');
    const image = container.querySelector('[data-image]');
    const overlay = document.querySelector(".contact_overlay_close")

    overlay.style.pointerEvents = "auto";

    const tl = gsap.timeline();

    tl.to(container, {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
        duration: transitionSlider,
        ease: "ease-menu"
    }).to(overlay, {
        autoAlpha: 1,
        duration: transitionSlider,
        ease: "ease-menu"
    }, "<").to(text, {
        yPercent: 0,
        rotate: 0.001,
        duration: 1.15,
        stagger: 0.0425,
        ease: "ease-secondary"
    }, "-=0.45").to(image, {
        scale: 1,
        rotate: 0.001,
        duration: 1.2,
        ease: "ease-secondary",
    }, "<").to(cover, {
        autoAlpha: 0,
        duration: 0.6
    }, "<");

}

function initContactForm() {
    const customButton = document.querySelector("[data-submit-btn]");
    const customButtonText = document.querySelector("[data-submit-text]");
    const defaultSubmitButton = document.querySelector('.form-submit');

    defaultSubmitButton.addEventListener('click', function(event) {
        customButton.disabled = true;
        customButtonText.textContent = 'Submitting...';
    });

    const body = document.body;
    const contactBtns = document.querySelectorAll('[data-contact-btn]');
    const closeBtn = document.querySelector('[data-contact-close]');
    const container = document.querySelector(".contact_modal_wrap");

    // Check if required elements exist
    if (!container) {
        return; // Exit the function if container doesn't exist
    }

    const text = container.querySelectorAll(".split-child");
    const coverContainer = container.querySelector("[data-image-reveal-noscroll]");
    const cover = container.querySelector('[data-image-cover]');
    const image = container.querySelector('[data-image]');
    const overlay = document.querySelector(".contact_overlay_close");

    // Check if other required elements exist
    if (!overlay || !cover || !image) {
        return;
    }

    gsap.set(cover, {
        autoAlpha: 1
    });
    gsap.set(image, {
        scale: 1.1
    });

    gsap.set(text, {
        yPercent: 102,
    });

    // Check if menu elements exist
    if (!contactBtns.length) {
        return;
    }

    if (!closeBtn) {
        return;
    }

    const toggleContactForm = () => {
        const isOpen = body.dataset.contactStatus === 'is-open';
        body.dataset.contactStatus = isOpen ? 'is-closed' : 'is-open';
        if (isOpen) {
            animateContactClose();
        } else {
            animateContactOpen();
        }
    };

    const closeContactForm = () => {
        if (body.dataset.contactStatus === 'is-open') {
            body.dataset.contactStatus = 'is-closed';
            animateContactClose();
            document.body.removeAttribute("data-lenis-prevent");
            document.body.classList.remove("overflow-hidden");
        }
    };

    // Add click event to all menu buttons
    contactBtns.forEach(btn => {
        btn.addEventListener('click', toggleContactForm);
    });

    closeBtn.addEventListener('click', closeContactForm);

    overlay.addEventListener('click', closeContactForm);

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeContactForm();
        }
    });
}

function initNavFunctions() {
    gsap.set(".navbar_mini_wrap > *", {
        yPercent: 102,
        y: 0,
        visibility: "visible"
    });

    ScrollTrigger.create({
        start: "500px top",
        end: "max",
        onEnter: () => {
            gsap.to([".navbar_mini_btn", ".navbar_mini_contain"], {
                yPercent: 0,
                duration: transitionNormal,
                stagger: 0.1,
                ease: "ease-secondary"
            });
        },
        onLeaveBack: () => {
            gsap.to([".navbar_mini_contain", ".navbar_mini_btn"], {
                yPercent: 102,
                duration: transitionNormal,
                stagger: 0.05,
                ease: "ease-secondary"
            });
        }
    });
}

function initImageReveal() {
    const revealImages = document.querySelectorAll('[data-image-reveal]');

    revealImages.forEach(container => {
        const cover = container.querySelector('[data-image-cover]');
        const image = container.querySelector('[data-image]');

        // Set initial state
        gsap.set(cover, {
            autoAlpha: 1
        });
        gsap.set(image, {
            scale: 1.05
        });

        // Single ScrollTrigger with onEnter
        ScrollTrigger.create({
            trigger: container,
            start: "top 90%",
            once: true,
            onEnter: () => {
                const tl = gsap.timeline();

                const animate = () => {
                    tl.to(image, {
                        scale: 1,
                        duration: 1.2,
                        ease: "ease-secondary"
                    }, 0).to(cover, {
                        autoAlpha: 0,
                        duration: 0.6
                    }, 0); // simultaneous
                };

                // If image is already loaded, animate immediately
                if (image.complete) {
                    animate();
                } else {
                    // Wait for the image to load before animating
                    image.onload = () => animate();
                }
            }
        });
    });
}

function initLoader() {

    window.scrollTo(0, 0)

    document.body.setAttribute("data-lenis-prevent", "true");
    document.body.classList.add("overflow-hidden");

    // Create main timeline
    const mainTl = gsap.timeline();

    // Initialize text splitting
    initSplitText();

    // Set default animation properties
    gsap.defaults({
        ease: "ease-transition",
        duration: 1
    });

    // Text loop animation (in parallel with line animation)
    const loopTimeline = gsap.timeline({
        repeat: 1,
        repeatDelay: 0.1
    });

    // Setup initial state for duplicate text
    loopTimeline.set(".oh_text_duplicate", {
            yPercent: 100
        })
        .to(".oh_text", {
            yPercent: -100,
            ease: "ease-textloader",
            duration: transitionNormal,
            stagger: 0.125
        })
        .to(".oh_text_duplicate", {
            yPercent: 0,
            ease: "ease-textloader",
            duration: transitionNormal,
            stagger: 0.125
        }, "<");

    // Add text animation to main timeline
    mainTl.add(loopTimeline, 0);

    // Line animation sequence (coordinated with text animation)
    mainTl.to(".preloader_line", {
            xPercent: 58,
        }, 0)
        .to(".preloader_line", {
            xPercent: 100,
        }, 1.2)

    // Call pageTransitionOut before the preloader fades out
    // This ensures content animations start early enough to avoid flash
    mainTl.call(function() {
        pageTransitionOut();
    }, null, 1.59);

    // Fade out preloader AFTER content animations have started
    mainTl.to(".preloader_wrap", {
        autoAlpha: 0,
        duration: 0.35,
        ease: "ease-tertiary"
    }, 1.6);

    return mainTl;
}

function initHomePage() {
    const allWorks = $(".works_collection_item");

    allWorks.each(function(index) {
        $(this).find('.works_content_value').text(index + 1);
    });

    gsap.from(".process_left_item", {
        rotate: 0.0001,
        opacity: 0,
        y: 20,
        stagger: 0.0625,
        ease: "ease-secondary",
        duration: transitionSlider,
        scrollTrigger: {
            trigger: ".process_left_collection",
            start: "top 80%",
            toggleActions: "play none none none"
        }
    });
}

function initWorksPage() {

    const worksPage = document.querySelector('[data-barba-namespace="works"]');

    if (worksPage) {
        document.documentElement.classList.add("hide-scrollbar");
    } else {
        document.documentElement.classList.remove("hide-scrollbar"); // Remove on other pages
    }

    const progressCounter = document.querySelector('[data-progress-nr]');
    const horizontalSection = document.querySelector("[data-horizontal-section]");
    const wrapper = document.querySelector("[data-horizontal-wrap]");
    const items = document.querySelectorAll("[data-horizontal-item]");

    const transitionOutDuration = 600;
    const transitionInDuration = 600;

    function getScrollAmount() {
        const visibleItems = Array.from(items).filter(
            (item) => item.getAttribute('data-filter-status') === 'active'
        );

        if (visibleItems.length === 0) return 0;

        const wrapperWidth = wrapper.scrollWidth;
        const viewportWidth = window.innerWidth;
        const firstItemLeft = visibleItems[0].getBoundingClientRect().left;
        const lastItemMargin = parseFloat(
            getComputedStyle(visibleItems[visibleItems.length - 1]).marginRight
        );

        return -(wrapperWidth - viewportWidth + firstItemLeft + lastItemMargin);
    }

    function initScroll() {
        gsap.to(wrapper, {
            x: getScrollAmount(),
            ease: "none",
            scrollTrigger: {
                trigger: horizontalSection,
                pin: true,
                start: "top top",
                end: () => `+=${-getScrollAmount()}`,
                scrub: 0.3,
                invalidateOnRefresh: true,
                onUpdate: (self) => {
                    const progress = Math.round(self.progress * 100);
                    progressCounter.textContent = progress.toString().padStart(2, '0');

                    if (self.progress === 1) {
                        const visibleItems = Array.from(items).filter(
                            (item) => item.getAttribute('data-filter-status') === 'active'
                        );

                        if (visibleItems.length > 0) {
                            const lastItem = visibleItems[visibleItems.length - 1];
                            const lastItemRect = lastItem.getBoundingClientRect();
                            const adjustment = window.innerWidth - lastItemRect.right;

                            if (adjustment > 0) {
                                gsap.set(wrapper, {
                                    x: `+=${adjustment}`
                                });
                            }
                        }
                    }
                },
            },
        });
    }

    function updateScrollTrigger() {
        progressCounter.textContent = "00";

        ScrollTrigger.getAll().forEach((st) => {
            if (st.vars.trigger === horizontalSection) {
                st.kill();
            }
        });

        setTimeout(() => {
            initScroll();
        }, 50)

    }

    const mm = gsap.matchMedia();
    mm.add("(min-width: 768px)", () => {
        initScroll();
    });

    let resizeTimer;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            updateScrollTrigger();
        }, 100);
    });

    window.addEventListener('orientationchange', () => {
        updateScrollTrigger();
    });

    function initFilterBasic() {
        const groups = document.querySelectorAll('[data-filter-group]');

        groups.forEach((group) => {
            const buttons = group.querySelectorAll('[data-filter-target]');
            const items = group.querySelectorAll('[data-filter-name]');
            const transitionDelay = 200;

            const updateStatus = (element, shouldBeActive) => {
                element.setAttribute('data-filter-status', shouldBeActive ? 'active' :
                    'not-active');
                element.setAttribute('aria-hidden', shouldBeActive ? 'false' : 'true');
            };

            const handleMobileFilter = (target) => {
                items.forEach((item) => {
                    const shouldBeActive = target === 'all' || item.getAttribute(
                        'data-filter-name') === target;
                    const currentStatus = item.getAttribute('data-filter-status');

                    if (currentStatus === 'active') {
                        item.setAttribute('data-filter-status', 'transition-out');
                        setTimeout(() => updateStatus(item, shouldBeActive), transitionDelay);
                    } else {
                        setTimeout(() => updateStatus(item, shouldBeActive), transitionDelay);
                    }
                });

                buttons.forEach((button) => {
                    const isActive = button.getAttribute('data-filter-target') === target;
                    button.setAttribute('data-filter-status', isActive ? 'active' : 'not-active');
                    button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
                });

                setTimeout(() => {
                    ScrollTrigger.refresh();
                }, transitionDelay + 400);
            };

            const handleDesktopFilter = (target) => {
                document.body.classList.add("overflow-hidden");
                document.body.setAttribute("data-lenis-prevent", "true");

                buttons.forEach((button) => {
                    const isActive = button.getAttribute('data-filter-target') === target;
                    button.setAttribute('data-filter-status', isActive ? 'active' : 'not-active');
                    button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
                });

                gsap.to(wrapper, {
                    x: 0,
                    duration: 0.6,
                    ease: "ease-secondary",
                    onComplete: () => {
                        const activeItems = [];
                        items.forEach((item) => {
                            if (item.getAttribute('data-filter-status') === 'active') {
                                item.setAttribute('data-filter-status', 'transition-out');
                                activeItems.push(item);
                            }
                        });

                        setTimeout(() => {
                            items.forEach((item) => {
                                const shouldBeActive = target === 'all' || item.getAttribute(
                                    'data-filter-name') === target;
                                updateStatus(item, shouldBeActive);
                            });

                            setTimeout(() => {
                                updateScrollTrigger();
                                document.body.removeAttribute("data-lenis-prevent");
                                document.body.classList.remove("overflow-hidden");
                            }, transitionInDuration);
                        }, activeItems.length > 0 ? transitionOutDuration : 0);
                    },
                });
            };

            const handleFilter = (target) => {
                if (progressCounter) {
                    progressCounter.textContent = "00";
                }

                if (isMobileScreen) {
                    handleMobileFilter(target);
                } else {
                    handleDesktopFilter(target);
                }
            };

            buttons.forEach((button) => {
                button.addEventListener('click', (e) => {

                    e.preventDefault();
                    const target = button.getAttribute('data-filter-target');
                    if (button.getAttribute('data-filter-status') === 'active') return;
                    handleFilter(target);
                });
            });
        });
    }

    initFilterBasic();
}

function initProcessPage() {
    const stageCards = document.querySelectorAll(".process_stages_item");

    if (isMobileScreen) {
        return;
    } else {
        stageCards.forEach((card, index) => {
            const cardContainer = card.querySelector(".process_stages_contain");
            const cardOverlay = card.querySelector(".process_stages_overlay");

            // Disable scroll effect for the last item
            if (index === stageCards.length - 1) {
                return; // Skip GSAP animation for the last item
            }

            gsap.to(cardOverlay, {
                opacity: 0.3,
                scrollTrigger: {
                    trigger: card, // Listens to the slide’s position
                    start: 'top 0%', // Starts when its top reaches the top of the viewport
                    end: "bottom top",
                    scrub: true, // Progresses with the scroll
                }
            });

            gsap.to(cardContainer, {
                rotationZ: (Math.random() - 0.5) * 15, // RotationZ between -5 and 5 degrees
                scale: 0.7, // Slight reduction of the content
                rotationX: 30,
                ease: 'power1.in', // Starts gradually
                scrollTrigger: {
                    trigger: card, // Listens to the slide’s position
                    start: 'top 0%', // Starts when its top reaches the top of the viewport
                    end: "bottom top",
                    scrub: true // Progresses with the scroll
                }
            })

        });
    }

}

function initPrecedentPages() {
    const progressCounter = document.querySelector('[data-progress-nr]');
    const precedentItems = document.querySelectorAll(".precedent_collection_item");

    const mm = gsap.matchMedia();
    const breakPoint = 768; // Set tablet breakpoint

    mm.add({
            isDesktop: `(min-width: ${breakPoint}px)`,
            isMobile: `(max-width: ${breakPoint - 1}px)`,
            reduceMotion: "(prefers-reduced-motion: reduce)",
        },
        (context) => {
            let {
                isDesktop,
                isMobile,
                reduceMotion
            } = context.conditions;

            if (reduceMotion || isMobile) {
                // If the user prefers reduced motion OR the screen is below 480px, skip animations
                return;
            }

            precedentItems.forEach((item, index) => {
                const container = item.querySelector(".precedent_content_contain");
                gsap.set(container, {
                    scale: 0.7,
                    rotationX: 50
                });

                // Scale up animation
                gsap.timeline({
                    scrollTrigger: {
                        trigger: item,
                        ease: 'power1.in',
                        start: "top bottom",
                        end: "top 0%",
                        scrub: true,
                        // markers: true,
                    }
                }).to(container, {
                    scale: 1,
                    rotationX: 0
                });

                // Scale down animation (disabled for last item)
                if (index !== precedentItems.length - 1 || index === 0) {
                    gsap.timeline({
                        scrollTrigger: {
                            trigger: item,
                            ease: 'power1.out',
                            start: "top top",
                            end: "bottom 0%",
                            scrub: true,
                            // markers: true,
                        }
                    }).to(container, {
                        scale: 0.7,
                        rotationX: -50
                    });
                }
            });
        }
    );

    ScrollTrigger.create({
        trigger: document.body,
        start: 'top top',
        end: 'bottom bottom',
        scrub: 0.5,

        onUpdate: (self) => {
            if (progressCounter) { // Add this check
                const progress = Math.round(self.progress * 100);
                progressCounter.textContent = progress.toString().padStart(2, '0');
            }
        }
    });
}

function initStudioPage() {
    const memberItems = document.querySelectorAll('[data-content-trigger]');

    // Function to update the visible image and corresponding name based on the active index
    function updateMemberImage(activeIndex) {
        const images = document.querySelectorAll('[data-content-image]');
        images.forEach((img, index) => {
            if (index === activeIndex) {
                img.classList.add('active');
                gsap.to(img, {
                    opacity: 1,
                    duration: 0
                });
            } else {
                img.classList.remove('active');
                gsap.to(img, {
                    opacity: 0,
                    duration: 0
                });
            }
        });

        memberItems.forEach((name, index) => {
            if (index === activeIndex) {
                gsap.to(name, {
                    opacity: 1,
                    duration: 0
                });
            } else {
                gsap.to(name, {
                    opacity: 0.3,
                    duration: 0
                });
            }
        });
    }

    // Set default state on page load: first image and name active
    updateMemberImage(0);

    // Create ScrollTriggers for updating on scroll
    memberItems.forEach((member, index) => {
        ScrollTrigger.create({
            trigger: member,
            start: 'top center',
            end: 'bottom center',
            onEnter: () => updateMemberImage(index),
            onEnterBack: () => updateMemberImage(index),
            // markers: true // For debugging; remove in production
        });
    });
}

function initGalleryPage() {
    const galleryContain = document.querySelector(".gallery_contain")
    const sectionWrap = document.querySelector(".gallery_wrapper_wrap")

    // Create a MatchMedia instance
    const mm = gsap.matchMedia();

    // Add a context for reduced motion preference
    mm.add("(prefers-reduced-motion: reduce)", () => {
        // This code runs when reduced motion is preferred

        // Update the Draggable instance
        Draggable.create(galleryContain, {
            type: "x,y",
            bounds: window,
            inertia: true,
            edgeResistance: 0.5,
            maxDuration: 1.5,
            zIndexBoost: false,

            onPress: () => {},
            onRelease: () => {}
        });
    });

    // Default behavior when reduced motion is NOT preferred
    mm.add("(prefers-reduced-motion: no-preference), (prefers-reduced-motion: none)", () => {
        // Regular draggable with scaling effects
        Draggable.create(galleryContain, {
            type: "x,y",
            bounds: window,
            inertia: true,
            edgeResistance: 0.5,
            maxDuration: 1.5,
            zIndexBoost: false,

            // Updated onPress to check left click
            onPress: function(event) {
                if (event.button !== 0) {
                    this.endDrag(); // Stop drag if not left click
                    return;
                }

                // Your existing animations
                gsap.to(sectionWrap, {
                    scale: 0.9,
                    duration: 1.2,
                    ease: "ease-secondary"
                });

                gsap.to(".gallery_tooltip_wrap", {
                    autoAlpha: 0,
                    duration: 0.6,
                    ease: 'ease-menu',
                    filter: "blur(50px)",
                });
            },

            // This remains the same - scale back on release
            onRelease: () => {
                gsap.to(sectionWrap, {
                    scale: 1,
                    duration: transitionSlider,
                    ease: "ease-secondary"
                })
            }
        });
    });
}